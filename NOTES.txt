### DJANGO ###

*** Crear el proyecto ***
django-admin startproject nombreProyecto --> Si se agrega un espacio y se coloca un punto al final el archivo manage.py estara al mismo 
nivel que la carpeta del entorno y la carpeta que contiene los archivos principales del proyecto.

*** Iniciar una app sobre el proyecto ***
python manage.py startapp nombreApp --> Una vez iniciada la app se debe añadir a la lista INSTALLED_APPS del archivo de settings.py de la 
carpeta donde se encuetra la configuracion principal del proyecto.

*** Configuracion para la creacion de tablas ***
python manage.py migrate --> Esto se hace con la finalidad de eliminar esta advertencia: You have 18 unapplied migration(s). Your project 
may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run 'python manage.py migrate' to apply 
them.

*** Configuracion REST API / Conexion de servidores ***
Debido a que durante el desarrollo el back-end y el front-end nos dara cada uno un server de desarrollo, es necesario crear una comunicacion 
para trabajar sobre un mismo server, mediante el siguiente comando pip install django-cors-headers se puede instalar un paquete que ayuda en 
dicha configuracion y tambien necesitaremos pip install djangorestframework para la instanciar la api y sus diferentes configuraciones casi 
por default.

Una vez concluida la instalacion de los paquetes, debemos dirigirnos al archivo de settings.py de la carpeta donde se encuetra la configuracion 
principal del proyecto, y al igual que con el nombreApp, debemos añadir corsheaders y rest_framework a INSTALLED_APPS. Dentro del mismo archivo 
pero en la list MIDDLEWARE vamos a añadir corsheaders.middleware.CorsMiddleware justo por encima de django.middleware.common.CommonMiddleware.
(recomendacion de la documentacion --> https://pypi.org/project/django-cors-headers/)

Por ultimo, al final de toda la ficha setting.py es necesario añadir la list CORS_ALLOWED_ORIGINS = [] donde podremos indicar las ip que pueden 
hacer peticiones al server.
(recomendacion de la documentacion --> https://pypi.org/project/django-cors-headers/)

*** Creacion de tablas ***
python manage.py makemigrations --> Despues de makemigrations se puede especificar cual tala (class) se quiere crear o en caso de que no se 
espeficique, se crearan todas las que esten disponobles de ser creadas. Esto lo que hace es crear una carpeta de migrations dentro de la carpeta 
con el nombre de la app en donde existiran fichero con los codigos para crear las diferentes tablas.

Para la creacion de las tablas ejecutamos python manage.py migrate nombreApp y esto lo que hace es crear las tablas dentro de db.sqlite3 
(archivo binario), que es la que usa django por defecto en desarrollo.

*** Creacion de usuario para gestion de tablas ***
python manage.py createsuperuser

url access -> host/admin
Si se crea el proyecto desde cero se podra configurar el usuario y contraseña que se desee, yo por obvias razones de seguridad no indicare cual 
seleccione para mi host

Ahora debemos añadir en el fichero admin.py lo siguiente:
from .models import nombreClassApp
admin.site.register()
Esto nos permitira ver las tablas desde al administrador del proyecto.

*** Configuracion de las urls ***
Una vez creado el fichero que contiene el codigo para generar las consultas GET, PUT, POST y DELETE, nos dirigimos al fichero uls.py de la carpeta 
de proyecto y buscamos urlpatterns en donde se deben añadir las url.

### REACT + VITE ###

*** Crear el proyecto ***
npm create vite --> Damos nombre al proyecto, escogemos el framework y seleccionamos la variante. Luego solo se debe seguir los pasos que se indican 
en el terminal.

*** Limpieza del formato ***
Es necesario entrar en App.js, App.css e index.css y limpiar todo el codigo. La seccion de React se centra mas en el desarrollo web y no toca nada 
del back-end por lo que no es necesario realizar configuraciones tan laboriosas como con Django, aunque es importante tener conocimientos de CSS y HTML 
poder trabajar con React.

*** Documentacion extra ***

*** Modulo para autodocumentar APIs ***
pip install coreapi

Luego se debe añadir coreapi a INSTALLED_APPS en settings.py y tambien añadimos el dict REST_FRAMEWORK
(recomendacion de la documentacion --> https://www.django-rest-framework.org/coreapi/).

Ademas debemos añadir path('docs/', include_docs_urls(title='Tasks API')) al fichero de las urls.

*** Tecnologia usada para el estilo del Front-end ***
https://vitejs.dev/guide/
https://tailwindcss.com/docs/guides/vite
